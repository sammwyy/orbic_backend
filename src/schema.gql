# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CompleteFileDto {
  fileId: String!
  parts: [FilePart!]!
}

type Course {
  _id: ID!
  author: String!
  bannerId: String
  category: CourseCategory!
  chaptersCount: Float!
  createdAt: DateTime!
  description: String!
  isApproved: Boolean!
  lang: String!
  thumbnailId: String
  title: String!
  updatedAt: DateTime!
  visibility: CourseVisibility!
}

"""Course category options"""
enum CourseCategory {
  ART
  BUSINESS
  HEALTH
  HISTORY
  LANGUAGE
  MATHEMATICS
  OTHER
  SCIENCE
  TECHNOLOGY
}

input CourseFilterInput {
  author: String
  category: CourseCategory
  lang: String
  search: String
  visibility: CourseVisibility
}

"""Course visibility options"""
enum CourseVisibility {
  LINK_ONLY
  PRIVATE
  PUBLIC
}

type CoursesConnection {
  courses: [Course!]!
  hasMore: Boolean!
  limit: Int!
  offset: Int!
  total: Int!
}

input CreateCourseInput {
  bannerId: String
  category: CourseCategory!
  description: String!
  lang: String!
  thumbnailId: String
  title: String!
  visibility: CourseVisibility
}

input CreateFileDto {
  filename: String!
  mimetype: String!
  size: Float!
}

input CreateUserInput {
  displayName: String!
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  _id: String!
  clientToken: String
  createdAt: DateTime!
  filename: String!
  mimetype: String!
  size: Float!
  uploadId: String
}

input FilePart {
  etag: String!
  partNumber: Float!
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type Mutation {
  completeFile(payload: CompleteFileDto!): File!
  createCourse(input: CreateCourseInput!): Course!
  createFile(payload: CreateFileDto!): File!
  deleteCourse(id: ID!): Boolean!
  deleteFile(id: String!): Boolean!
  login(input: LoginInput!): AuthPayload!
  logout(refreshToken: String!): Boolean!
  logoutAllSessions(userId: String!): Boolean!
  refreshToken(refreshToken: String!): AuthPayload!
  register(input: CreateUserInput!): AuthPayload!
  requestPasswordReset(email: String!): Boolean!
  resetPassword(code: String!, newPassword: String!): Boolean!
  updateCourse(id: ID!, input: UpdateCourseInput!): Course!
  updateCourseVisibility(id: ID!, visibility: CourseVisibility!): Course!
  updateProfile(input: UpdateUserInput!): User!
  verifyEmail(code: String!): Boolean!
}

type Query {
  course(id: ID!): Course
  courses(filter: CourseFilterInput, limit: Int = 20, offset: Int = 0): CoursesConnection!
  getFileById(id: String!): File!
  getUserFiles: [File!]!
  getUserStorageStats: UserStorageStats!
  me: User!
  myCourses(limit: Int = 20, offset: Int = 0): CoursesConnection!
  publicCourses(limit: Int = 20, offset: Int = 0): CoursesConnection!
}

input UpdateCourseInput {
  bannerId: String
  category: CourseCategory
  description: String
  lang: String
  thumbnailId: String
  title: String
}

input UpdateUserInput {
  avatarId: String
  displayName: String
}

type User {
  _id: ID!
  avatarId: String
  createdAt: DateTime!
  displayName: String!
  email: String!
  isEmailVerified: Boolean!
  updatedAt: DateTime!
  username: String!
}

type UserStorageStats {
  limit: Float!
  remaining: Float!
  used: Float!
}