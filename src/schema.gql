# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnsweredQuestion {
  isCorrect: Boolean!
  questionIndex: Int!
  timeSpent: Float!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  sessionId: String!
  user: User!
}

type CategoryStat {
  category: CourseCategory!
  coursesCompleted: Int!
  levelsCompleted: Int!
  totalScore: Int!
  totalStars: Int!
}

type Chapter {
  _id: ID!
  courseId: String!
  createdAt: DateTime!
  description: String!
  levelsCount: Float!
  order: Float!
  title: String!
  updatedAt: DateTime!
}

type ChapterProgress {
  chapterId: String!
  completedAt: DateTime!
  completedLevels: Int!
  isCompleted: Boolean!
  isUnlocked: Boolean!
  maxPossibleStars: Int!
  totalLevels: Int!
  totalStars: Int!
}

input CompleteFileDto {
  fileId: String!
  parts: [FilePart!]!
}

type Course {
  _id: ID!
  author: String!
  bannerId: String
  category: CourseCategory!
  chaptersCount: Float!
  createdAt: DateTime!
  description: String!
  isApproved: Boolean!
  lang: String!
  thumbnailId: String
  title: String!
  updatedAt: DateTime!
  visibility: CourseVisibility!
}

"""Course category options"""
enum CourseCategory {
  ART
  BUSINESS
  HEALTH
  HISTORY
  LANGUAGE
  MATHEMATICS
  OTHER
  SCIENCE
  TECHNOLOGY
}

input CourseFilterInput {
  author: String
  category: CourseCategory
  lang: String
  search: String
  visibility: CourseVisibility
}

type CourseGenerationStatus {
  completedAt: DateTime
  courseId: String
  createdAt: DateTime!
  error: String
  jobId: String!
  message: String
  progress: Float!
  status: String!
}

type CourseProgress {
  _id: ID!
  chapterProgress: [ChapterProgress!]!
  completedAt: DateTime
  completedChapters: Int!
  completedLevels: Int!
  courseId: String!
  createdAt: DateTime!
  isCompleted: Boolean!
  levelProgress: [LevelProgress!]!
  totalChapters: Int!
  totalLevels: Int!
  totalScore: Int!
  totalStars: Int!
  totalTimeSpent: Int!
  updatedAt: DateTime!
  userId: String!
}

"""Course visibility options"""
enum CourseVisibility {
  LINK_ONLY
  PRIVATE
  PUBLIC
}

type CourseWithProgress {
  course: Course!
  progress: CourseProgress!
}

type CoursesConnection {
  courses: [Course!]!
  hasMore: Boolean!
  limit: Int!
  offset: Int!
  total: Int!
}

input CreateChapterInput {
  courseId: String!
  description: String!
  order: Float
  title: String!
}

input CreateCourseInput {
  bannerId: String
  category: CourseCategory!
  description: String!
  lang: String!
  thumbnailId: String
  title: String!
  visibility: CourseVisibility
}

input CreateFileDto {
  filename: String!
  mimetype: String!
  size: Float!
}

input CreateLevelInput {
  chapterId: String!
  courseId: String!
  description: String!
  order: Float
  questions: [QuestionInput!]
  title: String!
}

type DailyActivity {
  date: DateTime!
  levelsCompleted: Int!
  score: Int!
  starsEarned: Int!
  timeSpent: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  _id: String!
  clientToken: String
  createdAt: DateTime!
  filename: String!
  mimetype: String!
  size: Float!
  uploadId: String
}

input FilePart {
  etag: String!
  partNumber: Float!
}

type FreeChoiceQuestion {
  acceptedAnswers: [String!]!
  question: String!
  type: QuestionType!
}

type GameSession {
  _id: ID!
  answeredQuestions: [AnsweredQuestion!]!
  chapterId: String!
  courseId: String!
  createdAt: DateTime!
  endTime: DateTime
  levelId: String!
  lives: Int!
  maxScore: Int!
  score: Int!
  stars: Int!
  startTime: DateTime!
  status: GameSessionStatus!
  updatedAt: DateTime!
  userId: String!
}

"""Game session status options"""
enum GameSessionStatus {
  ABANDONED
  ACTIVE
  COMPLETED
  EXPIRED
}

input GenerateCourseFromFileInput {
  category: CourseCategory
  description: String
  fileId: String!
  lang: String
  title: String
}

input GenerateCourseFromTextInput {
  category: CourseCategory
  content: String!
  description: String
  lang: String
  title: String
}

type GeneratedCoursePreview {
  chapterCount: Float!
  course: Course!
  sampleChapters: [Chapter!]!
  sampleLevel: Level
}

type Level {
  _id: ID!
  chapterId: String!
  courseId: String!
  createdAt: DateTime!
  description: String!
  order: Float!
  questions: [Question!]!
  title: String!
  updatedAt: DateTime!
}

type LevelCompletionDto {
  chapterId: String!
  correctAnswers: Int!
  courseId: String!
  isChapterCompleted: Boolean!
  isCourseCompleted: Boolean!
  isNewHighScore: Boolean!
  levelId: String!
  maxScore: Int!
  nextLevelId: String!
  score: Int!
  stars: Int!
  timeSpent: Int!
  totalQuestions: Int!
}

type LevelProgress {
  attempts: Int!
  bestScore: Int!
  bestStars: Int!
  completed: Boolean!
  firstCompletedAt: DateTime!
  lastCompletedAt: DateTime!
  levelId: String!
  totalTimeSpent: Int!
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type MultipleChoiceOption {
  isCorrect: Boolean!
  text: String!
}

input MultipleChoiceOptionInput {
  isCorrect: Boolean!
  text: String!
}

type MultipleChoiceQuestion {
  options: [MultipleChoiceOption!]!
  question: String!
  type: QuestionType!
}

type Mutation {
  abandonSession(sessionId: String!): Boolean!
  completeFile(payload: CompleteFileDto!): File!
  createChapter(input: CreateChapterInput!): Chapter!
  createCourse(input: CreateCourseInput!): Course!
  createFile(payload: CreateFileDto!): File!
  createLevel(input: CreateLevelInput!): Level!
  deleteChapter(id: ID!): Boolean!
  deleteCourse(id: ID!): Boolean!
  deleteFile(id: String!): Boolean!
  deleteLevel(id: ID!): Boolean!
  generateCourseFromFile(input: GenerateCourseFromFileInput!): String!
  generateCourseFromText(input: GenerateCourseFromTextInput!): String!
  initializeCourseProgress(courseId: ID!): CourseProgress!
  login(input: LoginInput!): AuthPayload!
  logout: Boolean!
  logoutAllSessions: Boolean!
  refreshToken(refreshToken: String!): AuthPayload!
  register(input: RegisterUserInput!): AuthPayload!
  reorderChapters(chapterIds: [ID!]!, courseId: ID!): [Chapter!]!
  reorderLevels(chapterId: ID!, levelIds: [ID!]!): [Level!]!
  requestPasswordReset(email: String!): Boolean!
  resetPassword(code: String!, newPassword: String!): Boolean!
  startLevel(input: StartGameSessionInput!): GameSession!
  submitAnswer(input: SubmitAnswerInput!): QuestionResultDto!
  updateChapter(id: ID!, input: UpdateChapterInput!): Chapter!
  updateCourse(id: ID!, input: UpdateCourseInput!): Course!
  updateCourseVisibility(id: ID!, visibility: CourseVisibility!): Course!
  updateLevel(id: ID!, input: UpdateLevelInput!): Level!
  updateProfile(input: UpdateUserInput!): User!
  verifyEmail(code: String!): Boolean!
}

type PairItem {
  left: String!
  right: String!
}

input PairItemInput {
  left: String!
  right: String!
}

type PairsQuestion {
  pairs: [PairItem!]!
  question: String!
  type: QuestionType!
}

type Query {
  chapter(id: ID!): Chapter
  chapterLevels(chapterId: ID!): [Level!]!
  course(id: ID!): Course
  courseChapters(courseId: ID!): [Chapter!]!
  courseLevels(courseId: ID!): [Level!]!
  courseProgress(courseId: ID!): CourseProgress
  courses(filter: CourseFilterInput, limit: Int = 20, offset: Int = 0): CoursesConnection!
  currentGameSession: GameSession
  getCourseGenerationStatus(jobId: String!): CourseGenerationStatus!
  getFileById(id: String!): File!
  getUserFiles: [File!]!
  getUserStorageStats: UserStorageStats!
  level(id: ID!): Level
  levelCompletion(sessionId: ID!): LevelCompletionDto!
  me: User!
  myCompletedCourses: [CourseProgress!]!
  myCourses(limit: Int = 20, offset: Int = 0): CoursesConnection!
  myCoursesWithProgress: [CourseWithProgress!]!
  myPlayingCourses: [CourseProgress!]!
  myStats: UserStats!
  previewGeneratedCourse(jobId: String!): GeneratedCoursePreview!
  publicCourses(limit: Int = 20, offset: Int = 0): CoursesConnection!
}

union Question = FreeChoiceQuestion | MultipleChoiceQuestion | PairsQuestion | SequenceQuestion | TrueFalseQuestion

input QuestionInput {
  acceptedAnswers: [String!]
  correctAnswer: Boolean
  correctSequence: [String!]
  options: [MultipleChoiceOptionInput!]
  pairs: [PairItemInput!]
  question: String
  type: QuestionType!
}

type QuestionResultDto {
  correctAnswer: [String!]!
  isCorrect: Boolean!
  isLastQuestion: Boolean!
  livesRemaining: Int!
}

"""Available question types"""
enum QuestionType {
  FREE_CHOICE
  MULTIPLE_CHOICE
  PAIRS
  SEQUENCE
  TRUE_FALSE
}

input RegisterUserInput {
  displayName: String!
  email: String!
  password: String!
  username: String!
}

type SequenceQuestion {
  correctSequence: [String!]!
  question: String!
  type: QuestionType!
}

input StartGameSessionInput {
  levelId: String!
}

input SubmitAnswerInput {
  booleanAnswer: Boolean
  freeAnswer: String
  pairMatches: [String!]
  questionIndex: Float!
  selectedOptionIndex: Float
  sequenceOrder: [String!]
  sessionId: String!
  timeSpent: Float!
}

type TrueFalseQuestion {
  correctAnswer: Boolean!
  question: String!
  type: QuestionType!
}

input UpdateChapterInput {
  description: String
  order: Float
  title: String
}

input UpdateCourseInput {
  bannerId: String
  category: CourseCategory
  description: String
  lang: String
  thumbnailId: String
  title: String
}

input UpdateLevelInput {
  description: String
  order: Float
  questions: [QuestionInput!]
  title: String
}

input UpdateUserInput {
  avatarId: String
  displayName: String
}

type User {
  _id: ID!
  avatarId: String
  createdAt: DateTime!
  displayName: String
  email: String!
  isEmailVerified: Boolean!
  updatedAt: DateTime!
  username: String!
}

type UserStats {
  _id: ID!
  categoryStats: [CategoryStat!]!
  createdAt: DateTime!
  currentStreak: Int!
  dailyActivity: [DailyActivity!]!
  longestStreak: Int!
  totalCoursesCompleted: Int!
  totalLevelsCompleted: Int!
  totalLivesLost: Int!
  totalScore: Int!
  totalStarsEarned: Int!
  totalTimeSpent: Int!
  updatedAt: DateTime!
  userId: String!
}

type UserStorageStats {
  limit: Float!
  remaining: Float!
  used: Float!
}